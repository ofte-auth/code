!function(window){"use strict";if(void 0===window.ofte){window.ofte=function(){var timer,impl={config:{authServiceURL:"https://localhost:2357",interval:2e4,networkTimeout:1e4,debug:!0,ca:!1}},sessionID="";async function getJSONData(url){let error=!1;return await fetch(url).then(response=>((response.status<200||response.status>=300)&&(error=!0),response.json())).then(obj=>{if(error)throw obj;return obj})}async function postJSONData(url,data={}){let options={method:"POST"};hasJSONStructure(data)||(options.body=JSON.stringify(data));let error=!1;return await fetch(url,options).then(response=>((response.status<200||response.status>=300)&&(error=!0),response.json())).then(obj=>{if(error)throw obj;return obj})}function getResponsePromise(method,url,data,headers=[],contentType="application/json",timeout=impl.config.networkTimeout){return new Promise(function(resolve,reject){getResponse(resolve,reject,method,url,data,headers,contentType,timeout)})}async function getResponse(resolve,reject,method,url,data,headers=[],contentType="application/json",timeout=impl.config.networkTimeout){var xhr=new XMLHttpRequest;try{xhr.open(method,url)}catch(e){return void reject(e)}if(xhr.onload=function(){if(this.status>=200&&this.status<300)if(""!=xhr.responseText)switch(xhr.getResponseHeader("Content-Type")){case"application/json":resolve(JSON.parse(xhr.responseText));default:resolve(xhr.responseText)}else resolve(this);else reject(xhr.responseText)},xhr.onerror=function(err){reject(err)},xhr.ontimeout=function(err){reject("Network timeout error"+err)},null!==data)switch(xhr.setRequestHeader("Content-Type",contentType),contentType){case"application/json":hasJSONStructure(data)||(data=JSON.stringify(data));break;case"arraybuffer":xhr.responseType="arraybuffer"}xhr.timeout=timeout;for(let i=0;i<headers.length;i++)xhr.setRequestHeader(headers[i][0],headers[i][1]);xhr.send(data)}function ofteU2FError(resp){if(!("errorCode"in resp))return"";if(resp.errorCode===u2f.ErrorCodes.OK)return"";let msg="ofte error code "+resp.errorCode;for(name in u2f.ErrorCodes)u2f.ErrorCodes[name]===resp.errorCode&&(msg+=" ("+name+")");return resp.errorMessage&&(msg+=": "+resp.errorMessage),ofte.config.debug&&console.log("CTAP1/Ofte Error:",msg),msg}function startCA(){try{!function(){if(""===sessionID)throw new Error("SessionID is nil");let callback=function(resp){let ofteError=ofteU2FError(resp);if(""!=ofteError)throw new Error(ofteError);var request=new XMLHttpRequest;request.open("POST",impl.config.authServiceURL+"/auth/v1/finish_ofte_assert/"+sessionID,!0),request.setRequestHeader("Content-Type","application/json;"),request.onload=function(){200==this.status?broadcastEvent("ofte-key-assert",sessionID):impl.endSession()},request.onerror=function(){throw new Error("Connection error")},request.send(JSON.stringify(resp))};var request=new XMLHttpRequest;request.open("GET",impl.config.authServiceURL+"/auth/v1/start_ofte_assert/"+sessionID,!0),request.onload=function(){if(200==this.status){let req=JSON.parse(request.responseText);u2fApi.u2fSign(req.appId,req.challenge,req.registeredKeys,callback,10)}else impl.endSession()},request.onerror=function(){throw new Error("Connection error")},request.send()}()}catch(err){return void console.log(err)}timer=window.setTimeout(startCA,impl.config.interval)}function stopCA(){window.clearTimeout(timer)}function broadcastEvent(eventName,detail=null){let event=new CustomEvent(eventName,{detail:detail});document.dispatchEvent(event)}function bufferDecode(value){return Uint8Array.from(atob(value),c=>c.charCodeAt(0))}function bufferEncode(value){return btoa(String.fromCharCode.apply(null,new Uint8Array(value))).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}function hasJSONStructure(str){if("string"!=typeof str)return!1;try{const result=JSON.parse(str),type=Object.prototype.toString.call(result);return"[object Object]"===type||"[object Array]"===type}catch(err){return!1}}impl.setConfig=function(config){impl.config=config},impl.getConfig=function(){return impl.config},impl.getOrCreatePrincipal=function(principalData){return new Promise(function(resolve,reject){getResponse(resolve,reject,"POST",impl.config.authServiceURL+"/auth/v1/principals",principalData)}).then(resp=>(resp.hasKey=null!==resp.fidoKeys&&resp.fidoKeys.length>0,resp))},impl.registerKey=async function(username){return new Promise(async(resolve,reject)=>{let resolved=!1;await async function(username){return new Promise(async(resolve,reject)=>{await getJSONData(ofte.config.authServiceURL+"/auth/v1/start_fido_registration/"+username).then(credentialCreationOptions=>{if(credentialCreationOptions.publicKey.challenge=bufferDecode(credentialCreationOptions.publicKey.challenge),credentialCreationOptions.publicKey.user.id=bufferDecode(credentialCreationOptions.publicKey.user.id),credentialCreationOptions.publicKey.excludeCredentials)for(var i=0;i<credentialCreationOptions.publicKey.excludeCredentials.length;i++)credentialCreationOptions.publicKey.excludeCredentials[i].id=bufferDecode(credentialCreationOptions.publicKey.excludeCredentials[i].id);return impl.config.debug&&console.log("inbound create options: ",credentialCreationOptions.publicKey),navigator.credentials.create({publicKey:credentialCreationOptions.publicKey})}).then(credential=>{let attestationObject=credential.response.attestationObject,clientDataJSON=credential.response.clientDataJSON,rawId=credential.rawId,data={id:credential.id,rawId:bufferEncode(rawId),type:credential.type,response:{attestationObject:bufferEncode(attestationObject),clientDataJSON:bufferEncode(clientDataJSON)}};return impl.config.debug&&console.log("attestation Object: ",attestationObject),postJSONData(impl.config.authServiceURL+"/auth/v1/finish_fido_registration/"+username,data)}).then(result=>{result.isOfteKey=void 0!==(key=result)&&void 0!==key.certOrganization&&void 0!==key.certCommonName&&void 0!==key.certSerial&&key.certOrganization.startsWith("Ofte.io")&&key.certCommonName.startsWith("CA Key")&&key.certSerial%1e3==0,resolve(result)}).catch(err=>{reject(err)})});var key}(username).then(authenticator=>(broadcastEvent("ofte-key-registered",authenticator),authenticator.isOfteKey||(resolved=!0,resolve(authenticator)),authenticator)).then(async authenticator=>(await new Promise(r=>setTimeout(r,350)),authenticator)).then(async authenticator=>authenticator.isOfteKey&&impl.config.ca?await async function(username){return new Promise(async(resolve,reject)=>{await getJSONData(ofte.config.authServiceURL+"/auth/v1/start_ofte_registration/"+username).then(async resp=>(ofte.config.debug&&console.log("about to ofte register",resp),await u2fApi.register(resp.appId,resp.registerRequests,resp.registeredKeys,10))).then(async resp=>(ofte.config.debug&&console.log("about to finish ofte register",resp),await postJSONData(ofte.config.authServiceURL+"/auth/v1/finish_ofte_registration/"+username,resp))).then(resp=>{resp.isOfteKey=!0,resolve(resp)}).catch(err=>{reject(err)})})}(username):authenticator).then(authenticator=>{resolved||resolve(authenticator)}).catch(err=>{broadcastEvent("ofte-error",err),reject(err)})})},impl.loginKey=async function(username){return new Promise(async(resolve,reject)=>{var result;await getResponsePromise("GET",impl.config.authServiceURL+"/auth/v1/start_fido_login/"+username).then(credentialRequestOptions=>(credentialRequestOptions.publicKey.userVerification="discouraged",credentialRequestOptions.publicKey.challenge=bufferDecode(credentialRequestOptions.publicKey.challenge),credentialRequestOptions.publicKey.allowCredentials.forEach(function(listItem){listItem.id=bufferDecode(listItem.id)}),navigator.credentials.get({publicKey:credentialRequestOptions.publicKey,password:!0}))).then(async function(assertion){let authData=assertion.response.authenticatorData,clientDataJSON=assertion.response.clientDataJSON,rawId=assertion.rawId,sig=assertion.response.signature,userHandle=assertion.response.userHandle;await getResponsePromise("POST",impl.config.authServiceURL+"/auth/v1/finish_fido_login/"+username,JSON.stringify({id:assertion.id,rawId:bufferEncode(rawId),type:assertion.type,response:{authenticatorData:bufferEncode(authData),clientDataJSON:bufferEncode(clientDataJSON),signature:bufferEncode(sig),userHandle:bufferEncode(userHandle)}})).then(resp=>{result=resp}).catch(function(response){throw JSON.parse(response)})}).then(()=>{broadcastEvent("ofte-key-authenticated",username),void 0!==result.caSessionID&&impl.config.ca&&(stopCA(),sessionID=result.caSessionID,impl.config.debug&&console.log("Starting Ofte CA session",sessionID),broadcastEvent("ofte-session-start",sessionID),startCA()),resolve(result)}).catch(err=>{console.log("failed to auth",username,"error",err),broadcastEvent("ofte-error",err),reject(err)})})},impl.fetch=function(url,config={}){if(""===sessionID)throw new Error("SessionID is null");return config.headers=new Headers(config.headers),config.headers.append("ofte-sessionid",sessionID),fetch(url,config).then(resp=>(broadcastEvent("ofte-fetch",url),resp))},impl.fetchStrong=function(url,config={}){if(""===sessionID)throw new Error("SessionID is null");return new Promise(function(resolve,reject){let t0=performance.now(),callback=function(resp){let ofteError=ofteU2FError(resp);if(""!=ofteError)throw new Error(ofteError);var request=new XMLHttpRequest;request.open("POST",impl.config.authServiceURL+"/auth/v1/finish_ofte_access/"+sessionID,!0),request.setRequestHeader("Content-Type","application/json;"),request.onload=async function(){200==this.status?(window.clearTimeout(timer),timer=window.setTimeout(startCA,impl.config.interval),config.headers=new Headers(config.headers),config.headers.append("Ofte-SessionID",sessionID),config.headers.append("Ofte-AccessToken",this.getResponseHeader("Ofte-AccessToken")),await fetch(url,config).then(resp=>{impl.config.debug&&console.log("fetchStrong took "+(performance.now()-t0)+" milliseconds"),broadcastEvent("ofte-fetch-strong",url),resolve(resp)}).catch(err=>{broadcastEvent("ofte-error",err),reject(err)})):reject(new Error(this.response.responseText))},request.onerror=function(){reject(new Error("Connection error"))},request.send(JSON.stringify(resp))};var request=new XMLHttpRequest;request.open("GET",impl.config.authServiceURL+"/auth/v1/start_ofte_access/"+sessionID,!0),request.onload=function(){if(200==this.status){let req=JSON.parse(request.responseText);u2fApi.u2fSign(req.appId,req.challenge,req.registeredKeys,callback,10)}else reject(new Error(this.response.responseText))},request.onerror=function(){reject(new Error("Connection error"))},request.send()})},impl.endSession=function(){stopCA();let session=sessionID;sessionID="",broadcastEvent("ofte-end-session",session),postJSONData(impl.config.authServiceURL+"/auth/v1/end_session/"+session)},window.onbeforeunload=function(){try{if(""!=sessionID){var xhr=new XMLHttpRequest;xhr.open("DELETE",window.ofte.config.serviceURL+"/s/"+sessionID,!1),xhr.send()}}catch(e){console.log(e,e.stack)}};var timeoutId=0,timeouts={};let worker=new Worker(URL.createObjectURL(new Blob(["("+function(){var timers={};this.addEventListener("message",function(evt){var data=evt.data;switch(data.command){case"setTimeout":var time=parseInt(data.timeout||0,10),timer=setTimeout(function(id){this.postMessage({id:id}),delete timers[id]}.bind(null,data.id),time);timers[data.id]=timer;break;case"clearTimeout":(timer=timers[data.id])&&clearTimeout(timer),delete timers[data.id]}})}.toString()+")()"],{type:"text/javascript"})));return worker.addEventListener("message",function(evt){var id=evt.data.id,fn=timeouts[id].fn,args=timeouts[id].args;fn.apply(null,args),delete timeouts[id]}),window.setTimeout=function(fn,delay){var args=Array.prototype.slice.call(arguments,2);delay=delay||0;var id=timeoutId+=1;return timeouts[id]={fn:fn,args:args},worker.postMessage({command:"setTimeout",id:id,timeout:delay}),id},window.clearTimeout=function(id){worker.postMessage({command:"clearTimeout",id:id}),delete timeouts[id]},impl}();var scripts=document.getElementsByTagName("script"),lastScript=scripts[scripts.length-1];if(window.ofte.config={authServiceURL:lastScript.getAttribute("data-auth-service-url")?lastScript.getAttribute("data-auth-service-url"):window.ofte.config.authServiceURL,interval:parseInt(lastScript.getAttribute("data-interval")?lastScript.getAttribute("data-interval"):window.ofte.config.interval),networkTimeout:parseInt(lastScript.getAttribute("data-network-timeout")?lastScript.getAttribute("data-network-timeout"):window.ofte.config.networkTimeout),debug:lastScript.getAttribute("data-debug")?"true"==lastScript.getAttribute("data-debug"):window.ofte.config.debug,ca:!1},void 0===window.ofte.config.authServiceURL){let msg="Ofte Error: the auth service URL is undefined. See https://ofte.io/todo.html for configuration help";throw console.log(msg),new Error(msg)}fetch(window.ofte.config.authServiceURL+"/auth/v1/version").then(response=>response.text()).then(data=>{window.ofte.config.debug&&console.log(data),data.startsWith("Ofte Continuous Authentication")&&(window.ofte.config.ca=!0)}).catch(err=>{console.log("Ofte Error: error connecting to Ofte Auth Service "+window.ofte.config.authServiceURL,err)})}}(window),function(){"use strict";var u2f=u2f||{};const chromeApi=u2f;var js_api_version;u2f.EXTENSION_ID="kmendfapggjehodndflmmgagdbamhnfd",u2f.MessageTypes={U2F_REGISTER_REQUEST:"u2f_register_request",U2F_REGISTER_RESPONSE:"u2f_register_response",U2F_SIGN_REQUEST:"u2f_sign_request",U2F_SIGN_RESPONSE:"u2f_sign_response",U2F_GET_API_VERSION_REQUEST:"u2f_get_api_version_request",U2F_GET_API_VERSION_RESPONSE:"u2f_get_api_version_response"},u2f.ErrorCodes={OK:0,OTHER_ERROR:1,BAD_REQUEST:2,CONFIGURATION_UNSUPPORTED:3,DEVICE_INELIGIBLE:4,TIMEOUT:5},u2f.getMessagePort=function(callback){if("undefined"!=typeof chrome&&chrome.runtime){var msg={type:u2f.MessageTypes.U2F_SIGN_REQUEST,signRequests:[]};chrome.runtime.sendMessage(u2f.EXTENSION_ID,msg,function(){chrome.runtime.lastError?u2f.getIframePort_(callback):u2f.getChromeRuntimePort_(callback)})}else u2f.isAndroidChrome_()?u2f.getAuthenticatorPort_(callback):u2f.isIosChrome_()?u2f.getIosPort_(callback):u2f.getIframePort_(callback)},u2f.isAndroidChrome_=function(){var userAgent=navigator.userAgent;return-1!=userAgent.indexOf("Chrome")&&-1!=userAgent.indexOf("Android")},u2f.isIosChrome_=function(){return["iPhone","iPad","iPod"].indexOf(navigator.platform)>-1},u2f.getChromeRuntimePort_=function(callback){var port=chrome.runtime.connect(u2f.EXTENSION_ID,{includeTlsChannelId:!0});setTimeout(function(){callback(new u2f.WrappedChromeRuntimePort_(port))},0)},u2f.getAuthenticatorPort_=function(callback){setTimeout(function(){callback(new u2f.WrappedAuthenticatorPort_)},0)},u2f.getIosPort_=function(callback){setTimeout(function(){callback(new u2f.WrappedIosPort_)},0)},u2f.WrappedChromeRuntimePort_=function(port){this.port_=port},u2f.formatSignRequest_=function(appId,challenge,registeredKeys,timeoutSeconds,reqId){if(void 0===js_api_version||js_api_version<1.1){for(var signRequests=[],i=0;i<registeredKeys.length;i++)signRequests[i]={version:registeredKeys[i].version,challenge:challenge,keyHandle:registeredKeys[i].keyHandle,appId:appId};return{type:u2f.MessageTypes.U2F_SIGN_REQUEST,signRequests:signRequests,timeoutSeconds:timeoutSeconds,requestId:reqId}}return{type:u2f.MessageTypes.U2F_SIGN_REQUEST,appId:appId,challenge:challenge,registeredKeys:registeredKeys,timeoutSeconds:timeoutSeconds,requestId:reqId}},u2f.formatRegisterRequest_=function(appId,registeredKeys,registerRequests,timeoutSeconds,reqId){if(void 0===js_api_version||js_api_version<1.1){for(var i=0;i<registerRequests.length;i++)registerRequests[i].appId=appId;var signRequests=[];for(i=0;i<registeredKeys.length;i++)signRequests[i]={version:registeredKeys[i].version,challenge:registerRequests[0],keyHandle:registeredKeys[i].keyHandle,appId:appId};return{type:u2f.MessageTypes.U2F_REGISTER_REQUEST,signRequests:signRequests,registerRequests:registerRequests,timeoutSeconds:timeoutSeconds,requestId:reqId}}return{type:u2f.MessageTypes.U2F_REGISTER_REQUEST,appId:appId,registerRequests:registerRequests,registeredKeys:registeredKeys,timeoutSeconds:timeoutSeconds,requestId:reqId}},u2f.WrappedChromeRuntimePort_.prototype.postMessage=function(message){this.port_.postMessage(message)},u2f.WrappedChromeRuntimePort_.prototype.addEventListener=function(eventName,handler){var name=eventName.toLowerCase();"message"==name||"onmessage"==name?this.port_.onMessage.addListener(function(message){handler({data:message})}):console.error("WrappedChromeRuntimePort only supports onMessage")},u2f.WrappedAuthenticatorPort_=function(){this.requestId_=-1,this.requestObject_=null},u2f.WrappedAuthenticatorPort_.prototype.postMessage=function(message){var intentUrl=u2f.WrappedAuthenticatorPort_.INTENT_URL_BASE_+";S.request="+encodeURIComponent(JSON.stringify(message))+";end";document.location=intentUrl},u2f.WrappedAuthenticatorPort_.prototype.getPortType=function(){return"WrappedAuthenticatorPort_"},u2f.WrappedAuthenticatorPort_.prototype.addEventListener=function(eventName,handler){if("message"==eventName.toLowerCase()){window.addEventListener("message",this.onRequestUpdate_.bind(this,handler),!1)}else console.error("WrappedAuthenticatorPort only supports message")},u2f.WrappedAuthenticatorPort_.prototype.onRequestUpdate_=function(callback,message){var messageObject=JSON.parse(message.data),responseObject=(messageObject.intentURL,messageObject.errorCode,null);messageObject.hasOwnProperty("data")&&(responseObject=JSON.parse(messageObject.data)),callback({data:responseObject})},u2f.WrappedAuthenticatorPort_.INTENT_URL_BASE_="intent:#Intent;action=com.google.android.apps.authenticator.AUTHENTICATE",u2f.WrappedIosPort_=function(){},u2f.WrappedIosPort_.prototype.postMessage=function(message){var str=JSON.stringify(message),url="u2f://auth?"+encodeURI(str);location.replace(url)},u2f.WrappedIosPort_.prototype.getPortType=function(){return"WrappedIosPort_"},u2f.WrappedIosPort_.prototype.addEventListener=function(eventName,handler){"message"!==eventName.toLowerCase()&&console.error("WrappedIosPort only supports message")},u2f.getIframePort_=function(callback){var iframeOrigin="chrome-extension://"+u2f.EXTENSION_ID,iframe=document.createElement("iframe");iframe.src=iframeOrigin+"/u2f-comms.html",iframe.setAttribute("style","display:none"),document.body.appendChild(iframe);var channel=new MessageChannel,ready=function(message){"ready"==message.data?(channel.port1.removeEventListener("message",ready),callback(channel.port1)):console.error('First event on iframe port was not "ready"')};channel.port1.addEventListener("message",ready),channel.port1.start(),iframe.addEventListener("load",function(){iframe.contentWindow.postMessage("init",iframeOrigin,[channel.port2])})},u2f.EXTENSION_TIMEOUT_SEC=30,u2f.port_=null,u2f.waitingForPort_=[],u2f.reqCounter_=0,u2f.callbackMap_={},u2f.getPortSingleton_=function(callback){u2f.port_?callback(u2f.port_):(0==u2f.waitingForPort_.length&&u2f.getMessagePort(function(port){for(u2f.port_=port,u2f.port_.addEventListener("message",u2f.responseHandler_);u2f.waitingForPort_.length;)u2f.waitingForPort_.shift()(u2f.port_)}),u2f.waitingForPort_.push(callback))},u2f.responseHandler_=function(message){var response=message.data,reqId=response.requestId;if(reqId&&u2f.callbackMap_[reqId]){var cb=u2f.callbackMap_[reqId];delete u2f.callbackMap_[reqId],cb(response.responseData)}else console.error("Unknown or missing requestId in response.")},u2f.isSupported=function(callback){var hasCalledBack=!1;function reply(value){hasCalledBack||(hasCalledBack=!0,callback(value))}u2f.getApiVersion(function(response){js_api_version=void 0===response.js_api_version?0:response.js_api_version,reply(!0)}),setTimeout(reply.bind(null,!1),1500)},u2f.sign=function(appId,challenge,registeredKeys,callback,opt_timeoutSeconds){void 0===js_api_version?u2f.getApiVersion(function(response){js_api_version=void 0===response.js_api_version?0:response.js_api_version,u2f.sendSignRequest(appId,challenge,registeredKeys,callback,opt_timeoutSeconds)}):u2f.sendSignRequest(appId,challenge,registeredKeys,callback,opt_timeoutSeconds)},u2f.sendSignRequest=function(appId,challenge,registeredKeys,callback,opt_timeoutSeconds){u2f.getPortSingleton_(function(port){var reqId=++u2f.reqCounter_;u2f.callbackMap_[reqId]=callback;var timeoutSeconds=void 0!==opt_timeoutSeconds?opt_timeoutSeconds:u2f.EXTENSION_TIMEOUT_SEC,req=u2f.formatSignRequest_(appId,challenge,registeredKeys,timeoutSeconds,reqId);port.postMessage(req)})},u2f.register=function(appId,registerRequests,registeredKeys,callback,opt_timeoutSeconds){void 0===js_api_version?u2f.getApiVersion(function(response){js_api_version=void 0===response.js_api_version?0:response.js_api_version,u2f.sendRegisterRequest(appId,registerRequests,registeredKeys,callback,opt_timeoutSeconds)}):u2f.sendRegisterRequest(appId,registerRequests,registeredKeys,callback,opt_timeoutSeconds)},u2f.sendRegisterRequest=function(appId,registerRequests,registeredKeys,callback,opt_timeoutSeconds){u2f.getPortSingleton_(function(port){var reqId=++u2f.reqCounter_;u2f.callbackMap_[reqId]=callback;var timeoutSeconds=void 0!==opt_timeoutSeconds?opt_timeoutSeconds:u2f.EXTENSION_TIMEOUT_SEC,req=u2f.formatRegisterRequest_(appId,registeredKeys,registerRequests,timeoutSeconds,reqId);port.postMessage(req)})},u2f.getApiVersion=function(callback,opt_timeoutSeconds){u2f.getPortSingleton_(function(port){if(port.getPortType){var apiVersion;switch(port.getPortType()){case"WrappedIosPort_":case"WrappedAuthenticatorPort_":apiVersion=1.1;break;default:apiVersion=0}callback({js_api_version:apiVersion})}else{var reqId=++u2f.reqCounter_;u2f.callbackMap_[reqId]=callback;var req={type:u2f.MessageTypes.U2F_GET_API_VERSION_REQUEST,timeoutSeconds:void 0!==opt_timeoutSeconds?opt_timeoutSeconds:u2f.EXTENSION_TIMEOUT_SEC,requestId:reqId};port.postMessage(req)}})};var isBrowser="undefined"!=typeof navigator&&!!navigator.userAgent,isSafari=isBrowser&&navigator.userAgent.match(/Safari\//)&&!navigator.userAgent.match(/Chrome\//),isIE=(isBrowser&&/(Edge\/)|(edg\/)/i.test(navigator.userAgent),isBrowser&&/(MSIE 9|MSIE 10|rv:11.0)/i.test(navigator.userAgent)),_backend=null;function getBackend(){if(_backend)return _backend;var supportChecker=new Promise(function(resolve,reject){function notSupported(){resolve({u2f:null})}return isBrowser?isSafari?notSupported():void 0!==window.u2f&&"function"==typeof window.u2f.sign?resolve({u2f:window.u2f}):isIE?notSupported():"http:"===location.protocol?notSupported():"undefined"==typeof MessageChannel?notSupported():void chromeApi.isSupported(function(ok){ok?resolve({u2f:chromeApi}):notSupported()}):notSupported()}).then(function(response){return _backend=response.u2f?supportChecker:null,response});return supportChecker}var ErrorNames={0:"OK",1:"OTHER_ERROR",2:"BAD_REQUEST",3:"CONFIGURATION_UNSUPPORTED",4:"DEVICE_INELIGIBLE",5:"TIMEOUT"};function makeError(msg,err){var code=null!=err?err.errorCode:1,type=ErrorNames[""+code],error=new Error(msg);return error.metaData={type:type,code:code},error}function _ensureSupport(backend){if(!backend.u2f){if("http:"===location.protocol)throw new Error("U2F is not supported over http, only https");throw new Error("U2F not supported")}}function arrayify(value){return null!=value&&Array.isArray(value)?value:null==value?[]:Array.isArray(value)?value.slice():[value]}var u2fApi=Object.freeze({ErrorCodes:{OK:0,OTHER_ERROR:1,BAD_REQUEST:2,CONFIGURATION_UNSUPPORTED:3,DEVICE_INELIGIBLE:4,TIMEOUT:5},ErrorNames:ErrorNames,isSupported:function(){return getBackend().then(function(backend){return!!backend.u2f})},ensureSupport:function(){return getBackend().then(_ensureSupport)},register:function(appId,registerRequests,signRequests,timeout){var _registerRequests=arrayify(registerRequests);"number"==typeof signRequests&&void 0===timeout&&(timeout=signRequests,signRequests=[]);var _signRequests=arrayify(signRequests);return getBackend().then(function(backend){_ensureSupport(backend);var u2f=backend.u2f;return new Promise(function(resolve,reject){u2f.register(appId,_registerRequests,_signRequests,function(response){console.log("u2f register, in callback",response),response.errorCode?reject(makeError("Registration failed",response)):(delete response.errorCode,resolve(response))},timeout)})})},sign:function(appId,signRequests,timeout){var _signRequests=arrayify(signRequests);return getBackend().then(function(backend){_ensureSupport(backend);var u2f=backend.u2f;return new Promise(function(resolve,reject){var _a,challenge=_signRequests[0].challenge,registeredKeys=(_a=[]).concat.apply(_a,_signRequests.map(function(_a){var version=_a.version,keyHandle=_a.keyHandle,appId=_a.appId;return arrayify(keyHandle).map(function(keyHandle){return{version:version,keyHandle:keyHandle,appId:appId}})}));u2f.sign(appId,challenge,registeredKeys,function(response){response.errorCode?reject(makeError("Sign failed",response)):(delete response.errorCode,resolve(response))},timeout)})})},u2fSign:u2f.sign});window.u2fApi=u2fApi}();
